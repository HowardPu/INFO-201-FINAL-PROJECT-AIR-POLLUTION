x = c(1, 2)
x = c(1, 2)
sum = 0
i = 2
while(x[i] <= 4e6) {
if(x[i] %% 2 == 0) {
sum = sum + x[i]
}
x[i + 1] = x[i] + x[i - 1]
i = i + 1
}
print(sum)
list = c('a', 'b', 'c', 'd', 'e')
list1 = rep(list, 5);
list2 = rep(list, each = 5)
list3 = paste0(list1, list2);
list3
install.package("nycflight13")
install.package('nycflight13')
install.package('nycflight13')
install.package('nycflight13')
install.package('nycflight13')
installpackage('nycflight13')
install.package('nycflight13')
install.packages("nycflight13")
library("nycflight13")
install.packages("nycflight13")
install.packages("nycflight14")
install.packages("nycflight16")
library("nycflights13")
install.packages("nycflights13")
library("nycflights13")
dim("nycflights13")
dim(flights)
head(flights)
filter(flights, year = 2013, month = 2)
filter(flights, year = 2013)
filter(flights, year = '2013')
filter(flights, year = '2013')
library("dplyr")
install.packages("dplyr")
library("dplyr")
filter(flights, year = 2013)
filter(flights, year == 2013)
install.packages("ggplot")
install.packages("ggplot2")
install.packages(PASWR)
install.packages('PASWR')
library(PASWR)
data("titanic3")
dim(titanic3)
str(titanic3)
install.packages('Hmisc')
library(Hmisc)
set.seed(0)
imputed.age =Hmisc:: impute(titanic3$age, what=c("mean"))
plot(density(imputed.age), col='blue', main = "Age Distribution")
lines(density(titanic3$age, na.rm = T), col='red')
legend("topright", c("before imputation", "after imputation"), lwd = 1,
lty = 1, col = c("red", "blue"))
set.seed(0)
imputed.age2 = Hmisc::impute(titanic3$age, "random")
plot(density(imputed.age2), col='blue', main = "Age Distribution")
lines(density(titanic3$age, na.rm = T), col='red')
legend("topright", c("before imputation", "after imputation"), lwd = 1,
lty = 1, col = c("red", "blue"))
set.seed(0)
imputed.fare = Hmisc::impute(titanic3$fare, "random")
new.titanic3=as.data.frame(titanic3$pclass)
colnames(new.titanic3)=c('pclass')
new.titanic3$survived=titanic3$survived
new.titanic3$sex=titanic3$sex
new.titanic3$age=titanic3$age
new.titanic3$sibsp=titanic3$sibsp
new.titanic3$parch=titanic3$parch
new.titanic3$fare=imputed.fare
str(new.titanic3)
new.titanic3.com=new.titanic3[complete.cases(new.titanic3),]
new.titanic3.incom=new.titanic3[!complete.cases(new.titanic3),-4]
install.packages('kknn')
new.titanic3.manhattan = kknn(age ~ ., new.titanic3.com,
new.titanic3.incom, k = 1, distance = 1)
library(kknn)
new.titanic3.manhattan = kknn(age ~ ., new.titanic3.com,
new.titanic3.incom, k = 1, distance = 1)
summary(new.titanic3.manhattan)
fit1=fitted(new.titanic3.manhattan)
new.titanic3.euclidean = kknn(age ~ ., new.titanic3.com,
new.titanic3.incom, k = 1, distance = 2)
fit2=fitted(new.titanic3.euclidean)
new.titanic3.minkowski=kknn(age ~ ., new.titanic3.com,
new.titanic3.incom, k = 1, distance = 10)
fit3=fitted(new.titanic3.minkowski)
plot(density(new.titanic3.com$age), col='blue', main='Age distribution', ylim=c(0,0.07))
lines(density(fit1), col='red')
lines(density(fit2), col='yellow')
lines(density(fit3), col='green')
print(x)
x <- 2
print(x)
x
y = 4
y
x <- "mike's house"
source('~/.active-rstudio-document', echo=TRUE)
y <- 3 > 2
print(y)
y
# Exercise-1: practice with basic syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Jinan"
# Assign your name to the variable `my.name`
my.name <- "Justin"
# Assign your height to a variable `my.height`
my.height <- 181
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy.price`, which is how expensive you think a puppy is
puppy.price <- 3000
# Create a variable `total.cost` that has the total cost of all of your puppies
total.cost <- 0
# Create a boolean variable `too.expensive`, set to true if the cost is greater than $1,000
too.expensive <- total.cost > 1000
# Create a variable `max.puppies`, which is the nuber of puppies you can afford for $1K.
max.puppies <- 1
too.expensive
x <- 4 / 3
x
x <- floor(4 / 3)
x
x <- floor(4 / 2)
x
x <- 4 / 2
x
instal.packages("stringr")
install.packages("stringr")
library(stringr)
AddThree <- function(x, 3) {
return (x + 3)
}
AddThree <- function(x) {
return (x + 3)
}
ten <- AddThree(7)
FeetToMeters <- function(feet) {
return (feet * 0.3)
}
height.in.feet <- 8
height.in.meter <- FeetToMeters(height.in.feet)
height.in.meter
height.in.meter
height.in.feet <- 6
height.in.meter <- FeetToMeters(height.in.feet)
height.in.meter
n <- 1
a <- n^5
a
n <- 1
a <- n^5-5
b <- (n+1)^5-5
while(gcd(a, b) == 1) {
n++
}
while gcd(a, b) == 1 {
n++
}
while (GCD(a, b) == 1) {
n++
}
gcd <- function(a, b)
{
a=as.integer(a)
b=as.integer(b)
stopifnot(!(a==0 && b==0))
if ( a == 0 )
return(b)
if ( b == 0 )
return(a)
return(abs(gcd(b, a-b*floor(a/b))))
}
while (gcd(a, b) == 1) {
n++
}
for (gcd(a, b) == 1) {
n++
}
while (gcd(a, b) == 1) n++
gcd <- function(a, b)
n <- 1
a <- n^5-5
n <- 1
a <- n^5-5
b <- (n+1)^5-5
while (gcd(a, b) == 1) n++
gcd <- function(a, b)
while (gcd(a, b) == 1) n++ a<-n^5-5 b <- (n+1)^5-5
n <- 1
a <- n^5-5
b <- (n+1)^5-5
while (gcd(a, b) == 1) n++ a<-n^5-5 b <- (n+1)^5-5
n <- 1
a <- n^5-5
b <- (n+1)^5-5
while (gcd(a, b) == 1) {
n = n + 1
a <- n^5-5
b <- (n+1)^5-5
}
n <- 1
while (gcd(n^5-5, (n+1)^5-5) == 1) {
n = n + 1
}
gcd <- function(x,y) {
r <- x%%y;
return(ifelse(r, gcd(y, r), y))
}
n <- 1
while (gcd(n^5-5, (n+1)^5-5) == 1) {
n = n + 1
}
n
gcd(n^5-5, (n+1)^5-5) == 1)
n <- 1
while (gcd(n^5-5, (n+1)^5-5) == 1) {
n = n + 1
}
n
gcd <- function(a, b) {
if (a == 0 | b == 0) {return(0)}
z <- a %% b
return(ifelse(z, gcd(b, z), b))
}
n <- 1
while (gcd(n^5-5, (n+1)^5-5) == 1) {
n = n + 1
}
n
NO2 <- mean(raw.data$NO2.Mean)
O3 <- mean(raw.data$O3.Mean)
CO <- mean(raw.data$CO.Mean)
setwd("/Users/chenduowen/Desktop/INFO201/INFO-201-FINAL-PROJECT-AIR-POLLUTION")
shiny::runApp('airpollution_Bar_Justin')
runApp('airpollution_Bar_Justin')
runApp('airpollution_Bar_Justin')
runApp('airpollution_Bar_Justin')
